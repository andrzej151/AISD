package Grafy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Zbio<V> {
	public static class Node<V> {
		private V value;
		private Node<V> next;
		private int height;

		public Node(V value) {
			this.value = value;
			this.next = this;
			this.height = 0;
		}

		public V getValue() {
			return value;
		}

		@Override
		public String toString() {
			return value.toString();
		}
	}

	private ArrayList<Node<V>> zbior;

	public Zbio() {
		zbior = new ArrayList<>();
	}

	public void makeSet(V value) {
		zbior.add(new Node<>(value));
	}

	public void union(V f, V s) {
		Node<V> firstNode = findNode(f);
		Node<V> secondNode = findNode(s);

		if (firstNode == null || secondNode == null)
			throw new IllegalArgumentException("puste argumenty");

		link(find(firstNode), find(secondNode));
	}

	private void link(Node<V> firstNode, Node<V> secondNode) {
		if (firstNode.height > secondNode.height) {
			secondNode.next = firstNode;
		} else if (firstNode.height == secondNode.height) {
			secondNode.next = firstNode;
			firstNode.height++;
		} else {
			firstNode.next = secondNode;
		}
	}

	private Node<V> findNode(V value) {
		return zbior.stream().filter(n -> n.value.equals(value)).findFirst().orElse(null);
	}

	public Node<V> find(Node<V> node) {
		if (node.next != node) {
			node.next = find(node.next);
		}

		return node.next;
	}

	public void printLine(V value) {
		Node<V> node = findNode(value);
		while (node.next != node) {
			System.out.printf("%s -> ", node.value);
			node = node.next;
		}
		System.out.printf("%s\n", node.value);
	}

	public void printSets() {
		Map<Node<V>, ArrayList<Node<V>>> setMap = new HashMap<>();
		zbior.forEach(x -> addToMap(x, setMap));
		for (Map.Entry<Node<V>, ArrayList<Node<V>>> entry : setMap.entrySet()) {
			System.out.printf("%5s: %s\n", entry.getKey(), entry.getValue());
		}
		System.out.println();
	}

	private void addToMap(Node<V> x, Map<Node<V>, ArrayList<Node<V>>> setMap) {
		setMap.putIfAbsent(find(x), new ArrayList<>());
		setMap.get(x.next).add(x);
	}
}